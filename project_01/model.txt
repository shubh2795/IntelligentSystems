# ANN image model for bee1_gray and bee2_1s_gray and bee4_gray dataset:
def make_image_ann_model():
    input_layer = input_data(shape=[None, 64, 64, 1])
    fc_layer_1 = fully_connected(input_layer, 128,
                                 activation='relu',
                                 name='fc_layer_1')
    fc_layer_2 = fully_connected(fc_layer_1, 2,
                                 activation='softmax',
                                 name='fc_layer_2')
    network = regression(fc_layer_2, optimizer='sgd',
                         loss='categorical_crossentropy',
                         learning_rate=0.1)
    model = tflearn.DNN(network)
    return model



# image cnn model for bee1,bee2_1s,bee4

input_layer = input_data(shape=[None, 64, 64, 3])
    conv_layer_1 = conv_2d(input_layer,
                           nb_filter=8,
                           filter_size=3,
                           activation='relu',
                           name='conv_layer_1')
    pool_layer_1 = max_pool_2d(conv_layer_1, 2, name='pool_layer_1')
    fc_layer_1 = fully_connected(pool_layer_1, 128,
                                 activation='relu',
                                 name='fc_layer_1')
    fc_layer_2 = fully_connected(fc_layer_1, 2,
                                 activation='softmax',
                                 name='fc_layer_2')
    network = regression(fc_layer_2, optimizer='sgd',
                         loss='categorical_crossentropy',
                         learning_rate=0.1)
    model = tflearn.DNN(network)
    return model



////////////
ann buzz 3 audio model

def make_audio_ann_model():
    input_layer = input_data(shape=[None, 4000, 1, 1])

    fc_layer_1 = fully_connected(input_layer, 128, activation='relu', name='fc_layer_1')

    fc_layer_2 = fully_connected(fc_layer_1, 32, activation='relu', name='fc_layer_2')

    fc_layer_3 = fully_connected(fc_layer_2, 3, activation='softmax', name='fc_layer_3')

    network = regression(fc_layer_3, optimizer='sgd',
                         loss='categorical_crossentropy',
                         learning_rate=0.125)
    model = tflearn.DNN(network)
    return model


/////////////////0.216 - 0.736



///////////////////////cnn model for all audio

def make_audio_cnn_model():
    input_layer = input_data(shape=[None, 4000, 1, 1])
    conv_layer_1 = conv_2d(input_layer,
                           nb_filter=64,
                           filter_size=10,
                           activation='relu',
                           name='conv_layer_1')
    pool_layer_1 = max_pool_2d(conv_layer_1, 4, name='pool_layer_1')
    conv_layer_2 = conv_2d(pool_layer_1,
                           nb_filter=16,
                           filter_size=4,
                           activation='relu',
                           name='conv_layer_2')
    pool_layer_2 = max_pool_2d(conv_layer_2, 4, name='pool_layer_2')

    fc_layer_1 = fully_connected(pool_layer_2, 512,
                                 activation='relu',
                                 name='fc_layer_1')

    d1 = dropout(fc_layer_1,0.5)

    fc_layer_2 = fully_connected(d1, 128,
                                 activation='relu',
                                 name='fc_layer_2')
    d2=dropout(fc_layer_2,0.5)
    fc_layer_3 = fully_connected(d2, 3,
                                 activation='softmax',
                                 name='fc_layer_3')

    network = regression(fc_layer_3, optimizer='sgd',
                         loss='categorical_crossentropy',
                         learning_rate=0.125)
    model = tflearn.DNN(network)
    return model





